# back/tools/transcribe_media.py
# ============================
# –ë–õ–û–ö –ò–ú–ü–û–†–¢–û–í
# ============================
# –ò–º–ø–æ—Ä—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import time
import math
from pydub import AudioSegment

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from openai import OpenAI
# ============================
# –ë–õ–û–ö –ù–ê–°–¢–†–û–ï–ö –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def transcribe_media(file_path: str) -> list[str]:
    """
    Description:
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–∞ —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 5 –º–∏–Ω—É—Ç.

    Args:
        file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É.

    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —á–∞–Ω–∫–∞–º–∏ –º–µ–¥–∏–∞.
    
    Raises:
        Exception: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏.
    
    Examples:
        >>> transcribe_media("example.mp3")
        >>> transcribe_media("example.mp4")
        ['–ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞', '–í—Ç–æ—Ä–æ–π —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞', ...]
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        is_video = file_path.lower().endswith(('.mp4', '.avi', '.mov'))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
        audio = AudioSegment.from_file(file_path)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        if is_video:
            temp_audio_path = "temp.mp3"
            audio.export(temp_audio_path, format="mp3")
        else:
            temp_audio_path = file_path
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        duration_ms = len(audio)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
        chunk_duration_ms = (60 * 5) * 1000
        chunks_count = math.ceil(duration_ms / chunk_duration_ms)
        
        transcribed_chunks = []
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏. –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {chunks_count}")
        print(f"‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_ms / 1000:.2f} —Å–µ–∫—É–Ω–¥")
        print("-" * 50)

        for i in range(chunks_count):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
            start = i * chunk_duration_ms
            end = min((i + 1) * chunk_duration_ms, duration_ms)
            
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i+1}/{chunks_count} ({(i+1)/chunks_count*100:.1f}%)")
            print(f"üïí –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {start/1000:.2f}—Å - {end/1000:.2f}—Å")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –∞—É–¥–∏–æ
            chunk = audio[start:end]
            chunk_file = f"temp_chunk_{i}.mp3"
            chunk.export(chunk_file, format="mp3")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —á–∞–Ω–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
            with open(chunk_file, "rb") as audio_file:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API
                try:
                    transcription = client.audio.transcriptions.create(
                        model="whisper-1",
                        file=audio_file, 
                        response_format="text"
                    )
                    text = transcription
                    transcribed_chunks.append(text)
                    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:50]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
                except Exception as e:
                    error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {str(e)}"
                    print(f"‚ùå {error_message}")
                    transcribed_chunks.append(f"Error during recognition: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞–Ω–∫–∞
            os.remove(chunk_file)
            
            print("-" * 50)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)

        print(f"üèÅ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {chunks_count} —á–∞–Ω–∫–æ–≤.")
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len([chunk for chunk in transcribed_chunks if chunk])}")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_text = "\n\n".join(transcribed_chunks)
        saved_path = save_transcription(final_text, file_path)
        print(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {saved_path}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if is_video and os.path.exists(temp_audio_path):
            os.remove(temp_audio_path)
        
        return transcribed_chunks
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        print(f"üö´ –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ transcribe_media: {str(e)}")
        return [f"Error during transcription: {str(e)}"]

def merge_chunks(chunks: list[str], min_chunk_length: int = 100, max_chunk_length: int = 1000) -> list[str]:
    """
    Description:
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ.

    Args:
        chunks: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —á–∞–Ω–∫–∞–º–∏.
        min_chunk_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞–Ω–∫–∞ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö) –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
        max_chunk_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞.

    Returns:
        –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.
    
    Raises:
        None
    
    Examples:
        >>> merge_chunks(['–ö–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫', '–ï—â–µ –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π', '–î–ª–∏–Ω–Ω—ã–π —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞'])
        ['–ö–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫ –ï—â–µ –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π', '–î–ª–∏–Ω–Ω—ã–π —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞']
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    merged_chunks = []
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º–æ–≥–æ —á–∞–Ω–∫–∞
    current_chunk = ""

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞–Ω–∫–∞–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
    for chunk in chunks:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
        if len(current_chunk) + len(chunk) <= max_chunk_length:
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ –∫ —Ç–µ–∫—É—â–µ–º—É
            current_chunk += " " + chunk if current_chunk else chunk
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
            if current_chunk:
                merged_chunks.append(current_chunk)
            # –ò –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
            current_chunk = chunk

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if len(current_chunk) >= min_chunk_length:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö
            merged_chunks.append(current_chunk)
            # –ò –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
            current_chunk = ""

    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
    if current_chunk:
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö
        merged_chunks.append(current_chunk)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    return merged_chunks

def save_transcription(text: str, path: str) -> str:
    """
    Description:
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É
    
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
    base_name = os.path.splitext(path)[0]
    output_path = f"{base_name}_transcription.txt"
    
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(text)
    
    return output_path
